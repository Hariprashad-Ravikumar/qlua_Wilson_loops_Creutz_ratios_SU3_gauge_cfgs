require("stdlib")
L = qcd.lattice{4,4,4,8}
volume = 1
for i = 0, #L - 1 do
  volume = volume * L[i]
end

do
  local r = L:Int(os.random())
  for i = 0, #L - 1 do
    r = r * L[i] + L:pcoord(i)
  end
  S = L:RandomState(os.random(), r)
end


function toSUn(L, X)
  local Y = (X - X:adjoin()) / 2
  return (Y - Y:trace() / qcd.Nc * L:ColorMatrix(complex(1,0))):exp()
end

function weak_SUn(L, S)
  return toSUn(L, 0.2 * S:gaussian_ColorMatrix())
end

function strong_SUn(L, S)
  local v = weak_SUn(L, S)
  for i = 1, 100 do
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

function plaquette(U, i, j)
  local Ui = U[j+1]:shift(i, "from_forward")
  local Uj = U[i+1]:shift(j, "from_forward")
  local Pij = (U[i+1] * Ui * Uj:adjoin() * U[j+1]:adjoin()):trace():real()

  return Pij:sum() / (volume * qcd.Nc)
end


P = plaquette(weak_SUn(L, S), 1, 2)
printf("Plaquette = %f\n", P)
